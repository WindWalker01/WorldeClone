{"mappings":"AACA,IAAI,aAAa;AACjB,IAAI,WAAW;AACf,IAAI,eAAe;AACnB,MAAM,WAAW;AACjB,IAAI,SAAS;AAIb,MAAM,MAAM,SAAS,gBAAgB,CAAC;AAGtC;AAGA,eAAe;IACX,MAAM,MAAM,MAAM,MAAM;IACxB,MAAM,SAAS,MAAM,IAAI,IAAI;IAC7B,SAAS,OAAO,IAAI,CAAC,WAAW;IAEhC,QAAQ,GAAG,CAAC;IAEZ,SAAS,gBAAgB,CAAC,WAAW,SAAU,KAAK;QAChD,IAAG,SAAS,MAAM,GAAG,GACjB,UAAU,MAAM,GAAG;aACjB,IAAG,MAAM,GAAG,KAAK,aACnB;aACE,IAAG,MAAM,GAAG,KAAK,SACnB;IAER;AACJ;AAIA,eAAe;IAEX,MAAM,MAAM,MAAM,MAAM,4CAA4C;QAChE,QAAQ;QACR,MAAM,KAAK,SAAS,CAAC;YAAE,MAAM;QAAY;IAC7C;IACA,MAAM,SAAS,MAAM,IAAI,IAAI;IAE7B,MAAM,EAAC,SAAS,EAAC,GAAG;IAGpB,IAAG,CAAC,WAAU;QACV,MAAM;QACN;IACJ;IAIA,MAAM,cAAc,OAAO,KAAK,CAAC;IACjC,MAAM,aAAa,aAAa,KAAK,CAAC;IACtC,MAAM,YAAY,QAAQ;IAG1B,IAAG,aAAa,MAAM,GAAG,GAAG;IAE5B,IAAI,IAAI,IAAI,GAAG,IAAI,UAAU,IACzB,IAAG,WAAW,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE,EAAC;QAChC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;QACxC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC;IAC5B;IAGJ,IAAI,IAAI,IAAI,GAAG,IAAI,UAAU,IAAI;QAC7B,IAAG,WAAW,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE,EAAE;aAChC,IAAG,YAAY,QAAQ,CAAC,UAAU,CAAC,EAAE,KAAK,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,GAAE;YACxE,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;YACxC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC;QAE5B,OACI,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;IAGhD;IAGA,IAAG,iBAAiB,QAChB,MAAM;SAEL,IAAG,YAAY,GAChB,MAAM;SACL;QACD;QACA,eAAe;IACnB;AAGJ;AAEA,SAAS,UAAU,MAAM;IAErB,IAAG,aAAa,MAAM,GAAG,UAAS;QAC9B,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,MAAM,CAAC,CAAC,SAAS,GAAG,OAAO,WAAW;QAC1E,gBAAgB,OAAO,WAAW;IACtC;AACJ;AAEA,SAAS;IACL,IAAG,aAAa,MAAM,GAAG,GAAE;QACvB,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;QAC5D,eAAe,aAAa,SAAS,CAAC,GAAG,aAAa,MAAM,GAAG;IACnE;AACJ;AAEA,SAAS,QAAQ,KAAK;IAClB,MAAM,MAAM,CAAC;IACb,IAAI,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAI;QACjC,MAAM,SAAS,KAAK,CAAC,EAAE;QACvB,IAAG,GAAG,CAAC,OAAO,EACV,GAAG,CAAC,OAAO;aAEX,GAAG,CAAC,OAAO,GAAG;IAEtB;IAEA,OAAO;AACX;AAEA,SAAS,SAAS,KAAK;IAEnB,OAAO,aAAa,IAAI,CAAC;AAC7B","sources":["app.js"],"sourcesContent":["\r\nlet numLetters = 0;\r\nlet attempts = 0;\r\nlet currentGuess = \"\";\r\nconst MAX_CHAR = 5;\r\nlet answer = \"\";\r\n\r\n\r\n\r\nconst row = document.querySelectorAll(\".guess-row\");\r\n\r\n\r\ninit();\r\n\r\n\r\nasync function init(){\r\n    const res = await fetch(\"https://words.dev-apis.com/word-of-the-day\");\r\n    const resobj = await res.json();\r\n    answer = resobj.word.toUpperCase();\r\n\r\n    console.log(answer);\r\n\r\n    document.addEventListener(\"keydown\", function (event) {\r\n        if(isLetter(event.key)){\r\n            addLetter(event.key);\r\n        }else if(event.key === \"Backspace\"){\r\n            removeLetter();\r\n        }else if(event.key === \"Enter\"){\r\n            commitGuess();\r\n        }    \r\n    });\r\n}\r\n\r\n\r\n\r\nasync function commitGuess(){\r\n    \r\n    const res = await fetch(\"https://words.dev-apis.com/validate-word\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ word: currentGuess})\r\n    });\r\n    const resObj = await res.json();\r\n\r\n    const {validWord} = resObj;\r\n\r\n\r\n    if(!validWord){\r\n        alert(\"Not a valid word dumbass!\");\r\n        return;\r\n    }\r\n    \r\n    \r\n    \r\n    const answerChars = answer.split(\"\");\r\n    const guessChars = currentGuess.split(\"\");\r\n    const answerObj = makeMap(answerChars);\r\n\r\n\r\n    if(currentGuess.length < 5) return;\r\n\r\n    for(let i = 0; i < MAX_CHAR; i++){\r\n        if(answerChars[i] === guessChars[i]){\r\n            row[attempts].children[i].classList.add(\"correct\");\r\n            answerObj[guessChars[i]]--;\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < MAX_CHAR; i++){\r\n        if(answerChars[i] === guessChars[i]) continue;\r\n        else if(answerChars.includes(guessChars[i]) && answerObj[guessChars[i]] > 0){\r\n            row[attempts].children[i].classList.add(\"partial\");\r\n            answerObj[guessChars[i]]--;\r\n\r\n        }else{\r\n            row[attempts].children[i].classList.add(\"wrong\");\r\n\r\n        }\r\n    }\r\n\r\n\r\n    if(currentGuess === answer){\r\n        alert(\"You win!\");\r\n    }\r\n    else if(attempts >= 5){\r\n        alert(\"You lose!\");\r\n    }else{\r\n        attempts++;\r\n        currentGuess = \"\";\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction addLetter(letter){\r\n    \r\n    if(currentGuess.length < MAX_CHAR){\r\n        row[attempts].children[currentGuess.length].innerHTML = letter.toUpperCase();\r\n        currentGuess += letter.toUpperCase();\r\n    }\r\n}\r\n\r\nfunction removeLetter(){\r\n    if(currentGuess.length > 0){\r\n        row[attempts].children[currentGuess.length - 1].innerHTML = \"\";\r\n        currentGuess = currentGuess.substring(0, currentGuess.length - 1);\r\n    }\r\n}\r\n\r\nfunction makeMap(array){\r\n    const obj = {};\r\n    for(let i = 0; i < array.length; i++){\r\n        const letter = array[i];\r\n        if(obj[letter]){\r\n            obj[letter]--;\r\n        }else{\r\n            obj[letter] = 1;\r\n        }\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\nfunction isLetter(value){\r\n\r\n    return /^[a-zA-Z]$/.test(value);\r\n}\r\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}